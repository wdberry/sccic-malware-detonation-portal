@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.Net.Http.Headers
@using Microsoft.Fast.Components.FluentUI;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using sccic_malware_detonation_portal.Shared;
@inject HttpClient Http


<PageTitle>SC CIC Malware Detonation Portal</PageTitle>

    <!--
    Need to nest below button into a container type for the form and center it on the page.
    Potentially need a different control for InputFile, however,
    InputFile is the simplest one available for file upload for Blazor out of the box.
    -->

    <div style="width:100%;height:100%">
        <Stack Orientation="Orientation.Vertical"
            HorizontalAlignment="StackHorizontalAlignment.Center"
            VerticalAlignment="StackVerticalAlignment.Center"
            style="height:100%">
                    <div>
                <img src="/images/sc_cic_logo.png" style="text-align:center;max-width:400px;width:100%;height:auto;">
            </div>
            <div>

                        Logged in as: @submitter

        
        </div>
            <div>
            <label>
                <EditForm id="sampleSubmitForm" Model="@submissionModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <InputFile disabled="@isLoading" OnChange="@OnInputFileChange" @bind-Value="submissionModel.Files" Required="true" class="btn btn-primary" multiple/>
                    </div>
                    @if (submissionModel.Files.Count > 0)
                    {
                        <FluentCard>
                            <div class="card-body">
                                <ul>
                                    @foreach (var file in submissionModel.Files)
                                    {
                                        <li>
                                            File: @file.Name
                                            <br>
                                            @if (FileUpload(uploadResults, file.Name,
                                            out var result))
                                            {
                                                <span>
                                                    Submission Id: @result.SubmissionId
                                                </span>
                                                <span>
                                                    Submission Time: @result.SubmissionTime
                                                </span>
                                            }
                                            else
                                            {
                                                <span>
                                                    Status: @result.ErrorMessage
                                                </span>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        </FluentCard>
                    }
                    <div>
                        <FluentCheckbox id="PwCheckbox" @bind-Value="@submissionModel.IsPwProtected">Files password protected?</FluentCheckbox>
                    </div>
                        
                        <div>
                        <FluentTextField id="PwTextField" disabled="@(!submissionModel.IsPwProtected)" @bind-Value="submissionModel.Password">File Password</FluentTextField>
                        </div>

                            <FluentRadioGroup Name="responseRequested" @bind-Value="@submissionModel.ResponseRequested" Required=true>
                                <label style="color: --var(neutral-foreground-rest);" slot="label">
                                    Response Requested?:
                                </label>
                                <FluentRadio Value="@("true")">Yes</FluentRadio>
                                <FluentRadio Value="@("false")">No</FluentRadio>
                            </FluentRadioGroup>
                            <div>
                                <FluentTextArea @bind-Value=submissionModel.AdditionalInformation Placeholder="Comments or Additional Information"></FluentTextArea>
                            </div>
                    
                    <div>
                    <FluentButton disabled="@lockSubmission" Type=ButtonType.Submit>Submit Samples</FluentButton>
                    </div>
                </EditForm>
            </label>
            </div>
            <div>
                @if (userDisplayedError is not null)
                {
                    <p>
                        @userDisplayedError
                    </p>
                }
            </div>
</Stack>
</div>


@code {

    private SubmissionModel submissionModel = new();
    private List<SubmissionResult> uploadResults = new();
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private int maxAllowedFiles = 3;
    private long maxFileSize = 1024 * 1024 * 100;
    private bool isLoading = false;
    private bool lockSubmission = true;
    private string? userDisplayedError;
    private string? submitter;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        userDisplayedError = null;
        uploadResults.Clear();
        submissionModel.Files.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                submissionModel.Files.Add(new() { Name = file.Name, Content = file });
            }
        }
        if (submissionModel.Files.Count > 0)
        {
            lockSubmission = false;
        }
        shouldRender = true;
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        lockSubmission = true;
        shouldRender = false;
        userDisplayedError = null;
        var upload = false;
        if (submissionModel.ResponseRequested != "true" && submissionModel.ResponseRequested != "false") {
            userDisplayedError = "Please select if you would like a response or not.";
            lockSubmission = false;
            shouldRender = true;
            return;
        }
        using var content = new MultipartFormDataContent();
        foreach (var (file, index) in submissionModel.Files.WithIndex())
        {
            try {
                var fileContent = 
                    new StreamContent(file.Content.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = 
                    new MediaTypeHeaderValue(file.Content.ContentType);

                content.Add(
                    content: fileContent,
                    name: $"\"file_{index + 1}\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception)
            {
            
            var result = uploadResults.SingleOrDefault(f => f.FileName == file.Name) ?? new();

            uploadResults.Add(
                new()
                {
                    FileName = file.Name, 
                    ErrorMessage = "There was an issue preparing this file for submission.", 
                    Uploaded = false
                });
            
            }
        }
        if (upload)
        {
            
            var sr = new SubmissionRequest(){
                    Kind = Kind.file,
                    Submitter = submitter
                };
            if (submissionModel.IsPwProtected)
            {
                sr.Password = submissionModel.Password;
            }
            if (!(String.IsNullOrWhiteSpace(submissionModel.AdditionalInformation)))
            {
                sr.Comment = submissionModel.AdditionalInformation;
            }
            if (submissionModel.ResponseRequested == "true")
            {
                sr.ResponseRequested = true;
            }
            else if (submissionModel.ResponseRequested == "false")
            {
                sr.ResponseRequested = false;
            }
            var jsonContent = JsonContent.Create(JsonSerializer.Serialize(sr));
            content.Add(content: jsonContent, name: "json");
            try {
                var response = await Http.PostAsync("api/sample", content);
                var newSubmissionResults = await response.Content.ReadFromJsonAsync<List<SubmissionResult>>();
                if (newSubmissionResults is not null)
                {
                    uploadResults = newSubmissionResults.ToList();
                }
            }
            catch (HttpRequestException)
            {
                userDisplayedError = "Submission failed. Please try again later, or contact SC CIC regarding Portal service status.";
                lockSubmission = false;
            }
            catch (Exception)
            {
                userDisplayedError = "Undetermined error occurred. Submission may or may not have completed.";
            }
        }
        isLoading = false;
        shouldRender = true;
    }

    private static bool FileUpload(IList<SubmissionResult> uploadResults,
        string? fileName, out SubmissionResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            result.ErrorMessage = "File pending submission.";
        }

        return result.Uploaded;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            JsonNode json = await Http.GetFromJsonAsync<JsonNode>(".auth/me");
            try{
                submitter = (string)(json["ClientPrincipal"])["UserDetails"];
                }
            catch
            {
                submitter = (string)json;
            }
            
        }
        catch
        {
            submitter = "unknown";
        }
    }
}

    