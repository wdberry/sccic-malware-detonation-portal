@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using System.Net.Http.Headers
@using Microsoft.Fast.Components.FluentUI;
@using sccic_malware_detonation_portal.Shared;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager


<PageTitle>SC CIC Malware Detonation Portal</PageTitle>

    <!--
    Need to nest below button into a container type for the form and center it on the page.
    Potentially need a different control for InputFile, however,
    InputFile is the simplest one available for file upload for Blazor out of the box.
    -->
    <div style="width:100%;height:100%">
        <Stack Orientation="Orientation.Vertical"
            HorizontalAlignment="StackHorizontalAlignment.Center"
            VerticalAlignment="StackVerticalAlignment.Center"
            style="height:100%">
            <div>
                <AuthorizeView>
                    <Authorized>
                        Hello, @context.User.Identity?.Name!
                    </Authorized>
                </AuthorizeView>
        
        </div>
            <div>
            <label>
                <EditForm Model="@submissionModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputFile disabled=@isLoading OnChange="@OnInputFileChange" @bind-Value="submissionModel.Files" Required="true" class="btn btn-primary" multiple/>
                    <div>
                        @if (submissionModel.Files.Count > 0)
            {
                <div class="card">
                    <div class="card-body">
                        <ul>
                            @foreach (var file in submissionModel.Files)
                            {
                                <li>
                                    File: @file.Name
                                    <br>
                                    @if (FileUpload(uploadResults, file.Name,
                                    out var result))
                                    {
                                        <span>
                                            Submission Id: @result.SubmissionId
                                        </span>
                                        <span>
                                            Submission Time: @result.SubmissionTime
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            Status: @result.ErrorMessage
                                        </span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
                    </div>
                    <FluentButton disabled=@lockSubmission Type=ButtonType.Submit>Submit Samples</FluentButton>
                </EditForm>
            </label>
            </div>
</Stack>
</div>
    <!--
    <div>
        @if (apiResponsePending)
        {
            <p>Uploading...</p>
        }
        else
        {
            <button type="submit">Submit Samples</button>
        }
    </div>
    -->
    <!--
    //display component that shows uploaded file name to indicate file has been uploaded

    //display submit button
    
    //display additional fields, if necessary, such as email if can't be pulled from azure AD user data
-->


@code {

    private SubmissionModel submissionModel = new();
    private List<SubmissionResult> uploadResults = new();
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private bool pwProtectedFile = false;
    private string? filePassword = null;
    private int maxAllowedFiles = 3;
    private long maxFileSize = 1024 * 1024 * 100;
    private string? contentOutput = "";
    private bool isLoading = false;
    private bool lockSubmission = true;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        //isLoading = true;
        uploadResults.Clear();
        submissionModel.Files.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                submissionModel.Files.Add(new() { Name = file.Name, Content = file });
            }
        }
        shouldRender = true;
        if (submissionModel.Files.Count > 0)
        {
            lockSubmission = false;
        }

        //isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        //call API
        isLoading = true;
        lockSubmission = true;
        shouldRender = false;
        var upload = false;
        using var content = new MultipartFormDataContent();
        foreach (var file in submissionModel.Files)
        {
            try {
                var fileContent = 
                    new StreamContent(file.Content.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = 
                    new MediaTypeHeaderValue(file.Content.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                /*
                Logger.LogInformation(
                    "{FileName} not uploaded (Err: 6): {Message}", 
                    file.Name, ex.Message);
                */
            /*
            result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

                uploadResults.Add(
                    new()
                    {
                        FileName = file.Name, 
                        ErrorMessage = "Exception loading file to browser.", 
                        Uploaded = false
                    });
            */
            throw ex;
            }
        }
        if (upload)
        {
            
            var jsonContent = JsonContent.Create("\"{\"kind\":\"file\"}\"");
            content.Add(jsonContent);
            try {
                var response = await Http.PostAsync("http://localhost:7071/api/submitSample", content);
                var newSubmissionResults = await response.Content.ReadFromJsonAsync<List<SubmissionResult>>();
                //var newSubmissionResults = await response.Content.ReadAsStringAsync();
                if (newSubmissionResults is not null)
                {
                    uploadResults = newSubmissionResults.ToList();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("break");
            }

            
        }
        isLoading = false;
        shouldRender = true;
    }

    private static bool FileUpload(IList<SubmissionResult> uploadResults,
        string? fileName, out SubmissionResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            //logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorMessage = "File pending submission.";
        }

        return result.Uploaded;
    }
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}